= stylesheet_link_tag 'km_assignment.css'
.col-12.col-md-12.course-wrapper
  .container.quiz-container
    .quiz-start-section.col-lg-12.card
      %h4
        = title
      .quiz-rules
        %p
          All the questions are mandatory
      .quiz-intro-section
        %button.btn.btn-primary#start-quiz
          Start Assignment
    .col-lg-12
      - quiz_questions.map{|i| OpenStruct.new JSON.parse(i)}.each_with_index do |quiz_element,index|
        %div.quiz-questions.col-lg-12.col-centered.card.hidden{id: "quiz-render-point-#{quiz_element.id}"}
          .quiz-questions-body
            .columns.is-mobile.is-centered
              .column.is-half
                .has-text-centered
                  .quiz-bottom-navigation
                    -# - if index > 0
                    -#   %button.btn.nav-back-button{for: index, question_id: quiz_element.id, question_type: quiz_element.html_input_type}
                    -#     Back
                  %h7.navigation-title=  "QUESTION #{index + 1} OF #{1}"
                  %button.btn.btn-icon.rounded-circle.btn-info.glow.mr-1.mb-1.pull-right.voice-question
                    %i.bx.bx-volume-full{onclick: "speak(`#{quiz_element.question.gsub("_","") rescue ""}`)"}
                  %hr/
                  %h5.subtitle.has-text-centered.is-5
                    = quiz_element.question.html_safe rescue "-"
                  - if true
                    .options
                      - if quiz_element.html_input_type == "checkbox" || quiz_element.html_input_type == "radio"
                        - quiz_element.choices.each_with_index do |choice,index|             
                          %fieldset
                            - if quiz_element.html_input_type == "radio"
                              .radio.radio-info.radio-glow
                                %input{:name => "radioGlow", :type => "radio",id: quiz_element.id.to_s + index.to_s}/
                                %label{for: quiz_element.id.to_s + index.to_s}
                                  %span
                                    = choice
                            - else 
                              .checkbox.checkbox-info.checkbox-glow   
                                %input{type: "checkbox",name: quiz_element.id.to_s,value: choice,id: quiz_element.id.to_s + index.to_s, class: "quiz-radio radio"}
                                %label{for: quiz_element.id.to_s + index.to_s }
                                  %span
                                    =choice   
                      
                      - elsif quiz_element.html_input_type == "textarea"
                        %textarea{placeholder: "Write Answer Here..", required: "required"}
                      - else
                        %input{type: quiz_element.html_input_type, placeholder: "Write Answer Here..", required: "required"}
                -#   - else
                -#     - if quiz_element.question_type == "km_video"
                -#       .video-container
                -#         %video{src: quiz_element.artifact_url,class: "assessment-video", controls: false,autoplay: true, oncontextmenu: "return false;"}
                -#     - if quiz_element.question_type == "km_audio"
                -#       .audio-container
                -#         %audio{src: quiz_element.artifact_url,class: "assessment-video", controls: false, oncontextmenu: "return false;"}

                -#     - if quiz_element.question_type == "km_image"
                -#       %img{src: quiz_element.artifact_url,class: "assessment-image img img-responsive"}
                -#     .options
                -#       - if quiz_element.html_input_type == "checkbox" || quiz_element.html_input_type == "radio"
                -#         - quiz_element.choices.each_with_index do |choice,index|
                -#           %input{type: quiz_element.html_input_type,name: quiz_element.id.to_s,value: choice,id: quiz_element.id.to_s + index.to_s, class: "quiz-radio"}
                -#           %label{for: quiz_element.id.to_s + index.to_s }
                -#             %p.option.has-text-grey-dark.selected-answer
                -#               = choice

                -#       - elsif quiz_element.html_input_type == "textarea"
                -#         %textarea{placeholder: "Write Answer Here..", required: "required"}
                -#       - else
                -#         %input{type: quiz_element.html_input_type, placeholder: "Write Answer Here..", required: "required"}
                %button.btn.nav-next-button{for: index, question_id: quiz_element.id, question_type: quiz_element.html_input_type}
                  = (index == 0) ? "Submit" : "Proceed"

    .quiz-end-section.col-lg-12.col-centered.card.hidden
      %h1.text-center Good Job! You have completed the assignment
      %p.results-info Your assignment has been sucessfully summitted
      %span.tick
      %p.text-center.text-primary You are being redirected..




:javascript
  current_speech  = null;
  function speak(text){
    event.preventDefault();
    try{
          loadVoices()
    current_speech = new SpeechSynthesisUtterance(text);
    current_speech.rate = 0.8;
    current_speech.pitch = 1;
    current_speech.voice = speechSynthesis.getVoices().filter(function(voice) { return voice.lang == "hi-IN"})[0] 
    window.speechSynthesis.speak(current_speech);  
    } catch{
      console.log("Your browser doesnot support Speech API");
    }
  }

  function loadVoices() {
    try{
     var voices = speechSynthesis.getVoices();
    }catch{
      $(".voice-question").hide();
      console.log("Your browser doesnot support Speech API");
    }
  }
  
  // Execute loadVoices.
  loadVoices();

  var  questions = $(".quiz-questions");
  
  var is_started = false;
  var answered_questions = {}
  function startQuiz(){
    $(".quiz-start-section").addClass("hidden");
    $(questions[0]).removeClass("hidden");
    is_started = true;
  }
  $("#start-quiz").click(()=> startQuiz())

  
  function submitQuizResult(){
  $(".loader").show();
  $(".quiz-end-section").removeClass("hidden");
  sendPostRequest('#{submit_url}',{answered_questions}) 
  }

  $(".quiz-bottom-navigation .btn,.nav-next-button").click(function(e){
     try{
       window.speechSynthesis.cancel();
     }catch{

     }
      
    if(is_started){
      if($(this).hasClass("nav-back-button")){
        (Number($(this).attr('for'))) == 0 ? (null) : ($(questions[Number($(this).attr('for'))]).toggleClass("hidden") && $(questions[Number($(this).attr('for')) - 1]).toggleClass("hidden") )
      } else{
      question_id = $(this).attr('question_id');
      question_type = $(this).attr('question_type');
      if(question_type == "checkbox" || question_type == "radio"){
        checked_answers = $("#quiz-render-point-"+question_id).find("input:checked");
        answers = []
        for(i=0; i< checked_answers.length ; i++){
           answers.push($(checked_answers[i]).val());
        }
      } else {
        answers = $("#quiz-render-point-"+question_id).find("input[type=text],input[type=number],input[type=date],textarea").val(); 
      }
      if(answers.length == 0 ){
      alert("This question is mandatory");  
      } else{ 
	
	
      answered_questions[question_id] = answers 
      $(questions[Number($(this).attr('for'))]).addClass("hidden");
      $("html,body").animate({scrollTop :0}, 500);
      if(Number($(this).attr('for')) + 1 < questions.length){
        $(questions[Number($(this).attr('for')) + 1]).removeClass("hidden");
      }else{
         submitQuizResult();
      }
      }
    }
    }
  });

  function sendPostRequest(url,body){
  $.ajaxSetup({
    headers: {
    'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
    }
  });
  $.ajax({
    url: url,
    type:'POST',
    data: body,
    success:function(data){
    },
    error:function(data){
        console.log('something went wrong.');
    }
  });
  }
